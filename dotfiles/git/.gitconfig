[alias]
    autorebase = "!\
    rebase_onto_target(){ \
        TARGET=$1; \
        if [ -e $1 ]; then \
            TARGET=main; \
        fi; \
        GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD); \
        git checkout $TARGET; \
        git pull; \
        git checkout $GIT_BRANCH; \
        git rebase --committer-date-is-author-date $TARGET;\
    }; rebase_onto_target"
    cleanup-local = "!\
    cleanup_local(){ \
        GIT_MAIN_BRANCH=$(git rev-parse --abbrev-ref origin/HEAD | cut -c8-); \
        for BRANCH_NAME in $(git for-each-ref --format='%(refname:short)' refs/heads/); do \
            MERGE_BASE=$(git merge-base $BRANCH_NAME $GIT_MAIN_BRANCH); \
            BRANCH_HEAD=$(git rev-parse $BRANCH_NAME); \
            UPSTREAM=$(git branch --list $BRANCH_NAME --format '%(upstream)'); \
            if [[ -z $UPSTREAM ]]; then \
                if [[ $MERGE_BASE = $BRANCH_HEAD ]]; then \
                    echo ACTION: delete orphaned branch $BRANCH_NAME as it is merged into $GIT_MAIN_BRANCH; \
                    echo git branch -d $BRANCH_NAME; \
                else \
                    echo ACTION: push orphaned branch $BRANCH_NAME which has unmerged commits; \
                    echo git push -u origin $BRANCH_NAME; \
                fi \
            else \
                if [[ $MERGE_BASE = $BRANCH_HEAD ]]; then \
                    if [[ $BRANCH_NAME = $GIT_MAIN_BRANCH ]]; then \
                        echo Keeping local branch $BRANCH_NAME as it may be tracking $GIT_MAIN_BRANCH; \
                    else \
                        echo ACTION: delete local branch $BRANCH_NAME as it is merged into $GIT_MAIN_BRANCH; \
                        echo git branch -D $BRANCH_NAME; \
                    fi \
                else \
                    echo Keeping local $BRANCH_NAME as its origin is not merged into $GIT_MAIN_BRANCH; \
                fi \
            fi \
        done \
    }; cleanup_local"
    fix-permissions = "!\
    fix_permissions(){ \
        git diff -p \
        | grep -E '^(diff|old mode|new mode)' \
        | sed -e 's/^old/NEW/;s/^new/old/;s/^NEW/new/' \
        | git apply;\
    }; fix_permissions"
    merge-commits = "!\
    merges_since_date(){ \
        FROM=$1; \
        TO=$2; \
        git log --merges --first-parent --pretty='format:%C(auto)%h %<(17) %ah %b' --after=$FROM --before=$TO; \
    }; merges_since_date"
    sync-fork = "!\
    sync_fork(){ \
        GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD); \
        if [ $# -ne 0 ]; then \
            TARGET=$1; \
            git checkout $TARGET; \
        else \
            TARGET=$GIT_BRANCH; \
        fi; \
        git pull; \
        git fetch upstream; \
        git merge upstream/${TARGET}; \
        git push; \
        git checkout $GIT_BRANCH; \
    }; sync_fork"
    update-local = "!\
    update_local(){ \
        for BRANCH_NAME in $(git for-each-ref --format='%(refname:short)' refs/heads/); do \
            git checkout $BRANCH_NAME; \
            git pull; \
        done \
    }; update_local"
[core]
	pager = less -FR
[help]
    autocorrect = 5
[pull]
    rebase = true
[push]
    autoSetupRemote = true
[user]
    name = James Robinson
    email = james.em.robinson@gmail.com
